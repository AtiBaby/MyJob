#include <cstdlib>
#include <iostream>

using namespace std;

// Labirintus: mindig jobbra fordulunk, de ha csak körbe-körbe megyünk akkor egy pillanatra átváltunk a másik falra és azon megyünk tovább
// Labirintus ábrázolása: n*n mátrix és 1-fal darabját jelöli (konstanskét adjuk meg)       jobbra, le,  balra,   fel
// Lépés: jobbra mellettünk egy nemüres cella található. Hely és irány van (x,y). Az I(x,y)={(1,0);(0,1);(-1,0);(0,-1)}

int A[20][40]={
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
    0,1,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,1,0,0,1,0,0,0,1,0,0,0,1,0,
    0,1,0,1,1,1,1,0,0,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,0,1,0,1,0,1,1,0,1,0,0,0,1,0,1,0,
    0,1,0,0,1,0,0,0,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,1,1,1,0,1,0,1,0,
    0,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,1,1,0,1,1,1,0,0,0,1,1,0,1,0,1,0,0,0,1,1,1,0,
    0,1,1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,1,0,0,0,0,0,0,1,1,1,1,0,1,0,1,0,1,1,1,0,1,0,
    0,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,
    0,1,1,1,1,1,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,
    0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,
    0,1,0,1,0,0,0,1,1,0,1,0,1,0,1,0,0,0,1,1,1,1,0,1,0,0,0,1,0,1,1,0,1,0,1,1,1,0,1,0,
    0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,0,0,0,0,1,0,
    0,1,0,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,0,0,1,0,1,1,0,1,1,0,1,0,
    0,1,0,1,1,1,1,0,0,0,1,0,1,1,1,1,1,0,1,0,0,1,0,0,1,1,0,1,1,1,1,0,1,1,0,1,1,0,1,0,
    0,1,0,0,1,0,0,0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,1,0,
    0,1,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,0,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,1,0,
    0,1,1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,1,0,1,0,
    0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,1,0,1,0,0,1,0,1,0,1,1,0,0,0,1,0,0,0,1,0,1,0,
    0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};

int hely[2], B[2], J[2], I[2];
int voltefordulas=0;


int palyaszele(int x, int y){
    if((x==0 || y==0) || (x==19 || y==39)){
       return 2;
    } else {
       return 1;
    }
}

int lepes(int hely[2]){
        /*cout<<"Hely: ("<<hely[0]<<","<<hely[1]<<")\n";
        cout<<"I: ("<<I[0]<<","<<I[1]<<")\n";*/
        if( A[(hely[0]+I[0])][(hely[1]+I[1])]==0 ){
           hely[0]=hely[0]+I[0];
           hely[1]=hely[1]+I[1];
        }
     }

int main(int argc, char *argv[])
{
    int i, j, szam;
    char c;
    
    cout<<"Adja meg a kiindulopontot (10*10 matrix eseten): ";
    do{
    for(i=0;i<2;i++){
    cin>>szam;
    hely[i]=szam;}
    }while(A[hely[0]][hely[1]]==1);
    
    char beker;
    while(palyaszele(hely[0],hely[1])==1){
        beker=getchar();    // w=119, a=97, s=115, d=100
       fflush(stdin);
       i=beker;
       switch(i){
          case 119:
             I[0]=-1;
             I[1]=0;
             break;
          case 115:
             I[0]=1;
             I[1]=0;
             break;
          case 100:
             I[0]=0;
             I[1]=1;
             break;
          case 97:
             I[0]=0;
             I[1]=-1;
             break;
    }
        i=lepes(hely);
        for(i=0;i<20;i++){
           cout<<"\n";
           for(j=0;j<40;j++){
              if(i==hely[0] && j==hely[1]){
                 c=1;
                 cout<<c;
              } else if(A[i][j]==1){
                 c=219;
                 cout<<c;
              } else if(A[i][j]==0){
                 cout<<" ";
              }
           }
        }
    }
    
    system("PAUSE");
    return EXIT_SUCCESS;
}
